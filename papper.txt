
10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder

Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoderAdaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder

Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoderAdaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder

Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoderAdaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
Adaptation Algorithm for

Adaptive Streaming over HTTP

Konstantin Miller∗

, Emanuele Quacchio†

, Gianluca Gennari†

and Adam Wolisz∗

∗Technische Universitat Berlin, Germany  ̈

Email: {konstantin.miller, adam.wolisz}@tu-berlin.de

†STMicroelectronics, Milan, Italy

Email: emanuele.quacchio@st.com, gennarone@fastwebnet.it

Abstract—Internet video makes up a significant part of the

Internet traffic and its fraction is constantly growing. In order

to guarantee best user experience throughout different network

access technologies with dynamically varying network conditions,

it is fundamental to adopt technologies enabling a proper delivery

of the media content. One of such technologies is adaptive stream-
ing. It allows to dynamically adapt the bit-rate of the stream to

varying network conditions. There are various approaches to

adaptive streaming. In our work, we focus on the receiver-driven

approach where the media file is subdivided into segments, each

of the segments is provided at multiple bit-rates, and the task

of the client is to select the appropriate bit-rate for each of the

segments. With this approach, the challenges are (i) to properly

estimate the dynamics of the available network throughput, (ii)

to control the filling level of the client buffer in order to avoid

underflows resulting in playback interruptions, (iii) to maximize

the quality of the stream, while avoiding unnecessary quality

fluctuations, and, finally, (iv) to minimize the delay between

the user’s request and the start of the playback. During our

work, we designed and implemented a receiver-driven adaptation

algorithm for adaptive streaming that does not rely on cross-layer

information or server assistance. We integrated the algorithm

with a prototype implementation of a streaming client based

on the MPEG DASH (Dynamic Adaptive Streaming over HTTP)

standard. We evaluated the implemented prototype in real-world

scenarios and found that it performes remarkably well even

under challenging network conditions. Further, it exhibits stable

and fair operation if a common link is shared among multiple

clients.

I. INTRODUCTION

Fast home broadband connections, the growing popularity

of connected TV sets, and the spread of WiFi/3G enabled

mobile terminals are among the key drivers for the growing

popularity of Internet video. In addition to faster connections,

technological improvements in video coding and video de-
livery are making it possible for more consumers to watch

video content online. In order to guarantee best user expe-
rience throughput different network access technologies with

dynamically varying network conditions, it is fundamental to

adopt technologies enabling a proper delivery of the media

content. One of such technologies is adaptive video streaming.

The concept of adaptive video streaming is based on the

idea to adapt the bandwidth required by the video stream

to the throughput available on the network path from the

stream source to the client. The adaptation is performed by

varying the quality of the streamed video and thus its bit-rate,

that is, the number of bits required to encode one second of

playback. One of the approaches here is to divide the video

stream into segments and to encode each of the segments

in multiple quality levels, called representations. Based on

his estimation of the available throughput, a client might

request subsequent segments at different quality levels in order

to cope with varying network conditions. The algorithmic

process of deciding the optimal representation for each of

the segments in order to optimize the viewing experience is

a key element and one of the major challenges in adaptive

streaming systems. In particular, the challenges for the client

are (i) to properly estimate the dynamics of the available

throughput, (ii) to control the filling level of the local buffer in

order to avoid underflows resulting in playback interruptions,

(iii) to maximize the quality of the stream, while avoiding

unnecessary quality fluctuations, and, finally, (iv) to minimize

the delay between the user’s request and the start of the

playback.

Recent years have seen the advent and widespread of

streaming technologies based on the HTTP/TCP protocols.

The use of HTTP/TCP offers several advantages. It is cost-
effective since standard web servers and caches can be used.

Furthermore, it is firewall-friendly since almost all firewalls

are configured to support HTTP connections. Finally, HTTP

is stateless and the streaming session is managed by the client,

reducing the load on the server and thus allowing for better

scalability. On the other hand, operation on top of HTTP/TCP

reveals additional challenges since adaptation on top of TCPs

congestion control algorithm creates nested control loops.

In our study, we designed an algorithm for dynamic selec-
tion of segment bit-rate based on the network conditions. We

implemented the algorithm as a platform independent software

library. Further, based on the GStreamer framework [1], we

implemented a client for the recently adopted standard for

adaptive streaming over HTTP: MPEG DASH [2]. We inte-
grated the developed algorithm with the client and evaluated

its performance in real-world scenarios.

The outline of the paper is as follows. Section II contains

references to related work. In section III we describe our

system model, assumptions and notation. Section IV describes

the adaptation algorithm including adaptation goals, input

arguments and configuration parameters. It also provides the

pseudo-code of the algorithm. Section V presents the results

of the evaluation. Finally, section VI concludes the paper.

II. RELATED WORK

Liu et al. [3] propose an adaptation algorithm for adaptive

streaming over HTTP and evaluate it using the network

simulator ns-2 [4] in the presence of exponential and constant

bit-rate background traffic. The results show that the algorithm

occasionally fails to select the best possible representation.

Further, it exhibits significant fluctuations of the selected video

quality.

Jarnikov el al. [5] proposed to calculate the adaptation

strategy using a Markov decision process. With this approach,

an optimal strategy is calculated off-line for a given distri-
bution function of segment download times. The objective

function is a linear function giving constant penalty to play-

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

bit−rate [kbit/s]

0 0.5 1 1.5 2

10

20

50

download time [s]

buffer level [s]

Fig. 1. Single client, local loop, ”unlimited” bandwidth

150 200 250 300 350 400 450 500

0

500

1000

1500

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth restriction

150 200 250 300 350 400 450 500

10

20

50

download time [s]

buffer level [s]

Fig. 2. Single client, local loop, persistent bandwidth change

back to 1000 kbit/s. The algorithm reacted by adapting the bit-
rate of the stream after a moderate delay.

Figure 3 shows the results of a run, where the client was

exposed to periodic short-term throughput spikes lasting for 5 s

each. The desired behavior here is not to follow the individual

spikes but rather to stay with a bit-rate that is feasible with

the available average throughput. This is also the behavior

exhibited by the algorithm.

Figure 4 shows an experiment in a domestic WiFi network

with a high level of interference and heavy cross-traffic. We

observe that the algorithm is able to follow the dynamics of

the average available throughput in a robust manner.

The last two figures 5 and 6 show an artificial and a real-
world scenario where two players share a common link. In

the first scenario, the test is run over the local loop with total

throughput restricted to 2000 kbit/s. In the second scenario,

the clients stream over the domestic WiFi. In both scenarios,

we observe that the clients are able to share the available

bandwidth in a stable and fair manner.

Finally, we remark that in all the runs, no buffer underruns

occured.

150 200 250 300 350

1000

2000

download time [s]

[kbit/s]

bit−rate

throughput

bandwidth

150 200 250 300 350

10

20

50

download time [s]

buffer level [s]

Fig. 3. Single client, local loop, spikes 5s

0 100 200 300 400 500

500

1000

download time [s]

[kbit/s]

bit−rate

throughput

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

Fig. 4. Single client, busy domestic WiFi

VI. CONCLUSION

In this paper, we presented a new algorithm for dynamic

adaptation of video quality to the available network through-
put. The implemented algorithm aims at avoiding interruptions

of playback, maximizing video quality, minimizing the number

of video quality shifts and minimizing the delay between

user’s request and the start of the playback. The algorithm

was implemented as a software library and evaluated using

a prototype of an HTTP streaming client compliant with

the recently adopted standard MPEG DASH. The evaluation

was performed both in artificial and real-world scenarios and

demonstrated stable and fair behavior even under extremely

challenging network conditions.

ACKNOWLEDGMENT

This work has been partially supported by the FP7 COAST

project (FP7-ICT-248036), funded by the European Commu-
nity.

0 100 200 300 400 500

1000

2000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

bandwidth

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 5. Concurrent clients, local loop, restricted bandwidth

0 100 200 300 400 500

1000

2000

3000

download time [s]

[kbit/s]

bit−rate 1

bit−rate 2

throughput 1

throughput 2

0 100 200 300 400 500

10

20

50

download time [s]

buffer level [s]

buffer level 1

buffer level 1

Fig. 6. Concurrent clients, busy domestic WiFi, restricted bandwidth

REFERENCES

[1] “GStreamer multimedia framework.” [Online]. Available:

http://gstreamer.freedesktop.org/

[2] “MPEG DASH specification (ISO/IEC DIS 23009-1.2),” 2011.

[3] C. Liu, I. Bouazizi, and M. Gabbouj, “Rate adaptation for adaptive

HTTP streaming,” in Proc. of the second annual ACM conference on

multimedia systems (MMSys), Feb. 2011.

[4] “Network simulator ns-2.” [Online]. Available: http://isi.edu/nsnam/ns/

[5] D. Jarnikov and T. Ozcelebi, “Client intelligence for adaptive streaming

solutions,” in Proc. of the IEEE International Conference on Multimedia

and Expo (ICME), Jul. 2010.

[6] S. Akhshabi, A. C. Begen, and C. Dovrolis, “An experimental evaluation

of rate-adaptation algorithms in adaptive streaming over HTTP,” in Proc.

of the second annual ACM conference on multimedia systems (MMSys),

Feb. 2011.

[7] M. Zink, O. Kunzel, J. Schmitt, and R. Steinmetz, “Subjective im-  ̈

pression of variations in layer encoded videos,” in Proc. of the 11th

international conference on Quality of service (IWQoS), Jun. 2003.

[8] “STMicroelectronics press release on the developed

MPEG DASH client prototype,” 2011. [Online]. Available:

http://www.st.com/internet/com/press release/t3217.jsp

[9] “DummyNet network emulation tool.” [Online]. Available:

http://info.iet.unipi.it/ luigi/dummynet/

[10] “Open source DASH content generation tool: DASHEncoder.” [Online].

Available: https://github.com/slederer/DASHEncoder
